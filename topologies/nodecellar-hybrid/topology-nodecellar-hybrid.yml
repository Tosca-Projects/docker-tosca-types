tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: NodecellarDockerHybrid
  template_version: 2.0.0
  template_author: alien4cloud

description: "Alien4Cloud template of a docker Nodecellar + MongoDB on a VM."

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - docker-types:2.1.0-RC1
  - nodecellar-sample-types:2.1.0-RC1
  - mongo-types:2.1.0-RC1

topology_template:
  inputs:
    mongo_port:
      type: integer
      required: true
      default: 27017
      constraints:
        - in_range: [8000, 65535]
  node_templates:
    Compute:
      type: tosca.nodes.Compute
      capabilities:
        os:
          properties:
            type: linux
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
        endpoint:
          properties:
            secure: true
            protocol: tcp
            network_name: PRIVATE
            initiator: source
    Nodecellar:
      type: org.alien4cloud.nodes.Application.Docker.Nodecellar
      properties:
        docker_run_cmd: "cd /nodecellar && nodejs server.js"
        docker_env_vars:
          LOG_LEVEL: INFO
        cpu_share: "1.0"
        mem_share: "128 MB"
      requirements:
        - mongo_db:
            node: Mongod
            capability: org.alien4cloud.capabilities.endpoint.Mongo
            relationship: tosca.relationships.ConnectsTo
      capabilities:
        nodecellar_app:
          properties:
            docker_bridge_port_mapping: 0
            port: 3000
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
    Mongod:
      type: org.alien4cloud.nodes.Mongod
      properties:
        port: { get_input: mongo_port }
      requirements:
        - host:
            node: Compute
            capability: tosca.capabilities.Container
            relationship: tosca.relationships.HostedOn
      capabilities:
        endpoint:
          properties:
            port: { get_input: mongo_port }
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
  outputs:
    Nodecellar_endpoint:
      value: { get_attribute: [ Nodecellar, endpoint ] }
