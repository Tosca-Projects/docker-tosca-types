tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: docker-topo-sample-nodecellar
  template_version: 2.0.0-SNAPSHOT
  template_author: alien4cloud


description: |
  The result of the nodecellar topology after the translation of ContainerUnit and Containers into Kubernetes Deployment nodes.


imports:
  - docker-types:2.0.0-SNAPSHOT
  - tosca-normative-types:1.0.0-SNAPSHOT
  - docker-draft.sandbox.samples:2.0.0-SNAPSHOT
  - kubernetes-modifier-types:2.0.0-SNAPSHOT


repositories:
  docker:
    url: https://hub.docker.com/
    type: http


topology_template:

  node_templates:

    ContainerDeploymentUnit:
      type: org.alien4cloud.extended.container.types.kubernetes.Deployment # Match node with a concrete type
      requirements:
        - dependency_Mongo_Service:
            type_requirement: dependency
            node: Mongo_Service
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
        - dependency_Mongo_2_Service:
            type_requirement: dependency
            node: Mongo_2_Service
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
      properties:
        apiVersion: apps/v1beta1
        kind: Deployment
        metadata:
          name: ContainerDeploymentUnit
        spec:
          replicas: 1

    Nodecellar_Service:
      type: org.alien4cloud.extended.container.kubernetes.Service # Match node with a concrete type
      requirements:
        - dependency:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
      properties:
        apiVersion: v1
        kind: Service
        metadata:
          name: Nodecellar_Service
        spec:
          ports:
            - name: Nodecellar_nodecellar_app
              port: 3000
          selector:
            app: ContainerDeploymentUnit
          type: NodePort

    Nodecellar_Runtime:
      type: org.alien4cloud.extended.container.types.kubernetes.Container # Match node with a concrete type
      requirements:
        - host:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
      properties:
        container:
          name: Nodecellar
          env:
            LOG_LEVEL: "DEBUG"
            MONGO_HOST: { get_attribute: [Mongo, mongo_db, ip_address] }
            MONGO_PORT: { get_attribute: [Mongo, mongo_db, port] }
            NODECELLAR_PORT: 3000
          image: afraisse/nodecellar:exp
          resources:
            requests:
              memory: 1024M
              cpu: 1.0
            limits:
              memory: 1024M
              cpu: 1.0
          command: ["/bin/bash", "-c", "cd /nodecellar && nodejs server.js" ]
          ports:
          - containerPort: 3000

    Nodecellar:
      type: alien.nodes.Application.Docker.Nodecellar
      properties:
        docker_run_cmd: "cd /nodecellar && nodejs server.js"
        docker_env_vars:
          LOG_LEVEL: "DEBUG"
        cpu_share: 1
        mem_share: "1024 MB"
      requirements:
        - host:
            node: Nodecellar_Runtime
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: tosca.relationships.HostedOn
        - mongo_db:
            node: Mongo
            capability: alien.capabilities.endpoint.docker.Mongo
            relationship: tosca.relationships.ConnectsTo
      capabilities:
        nodecellar_app:
          properties:
            docker_bridge_port_mapping: 0
            port: 3000
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1

    Nodecellar_2_Service:
      type: org.alien4cloud.extended.container.kubernetes.Service # Match node with a concrete type
      requirements:
        - dependency:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
      properties:
        apiVersion: v1
        kind: Service
        metadata:
          name: Nodecellar_2_Service
        spec:
          ports:
            - name: Nodecellar_2_nodecellar_app
              port: 3000
          selector:
            app: ContainerDeploymentUnit
          type: NodePort

    Nodecellar_2_Runtime:
      type: org.alien4cloud.extended.container.types.kubernetes.Container # Match node with a concrete type
      requirements:
        - host:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
      properties:
        container:
          name: Nodecellar_2
          env:
            LOG_LEVEL: "DEBUG"
            MONGO_HOST: { get_attribute: [Mongo, mongo_db, ip_address] }
            MONGO_PORT: { get_attribute: [Mongo, mongo_db, port] }
            NODECELLAR_PORT: 4000
          image: afraisse/nodecellar:exp
          resources:
            requests:
              memory: 1024M
              cpu: 1.0
            limits:
              memory: 1024M
              cpu: 1.0
          command: ["/bin/bash", "-c", "cd /nodecellar && nodejs server.js" ]
          ports:
          - containerPort: 4000

    Nodecellar_2:
      type: alien.nodes.Application.Docker.Nodecellar
      properties:
        docker_run_cmd: "cd /nodecellar && nodejs server.js"
        docker_env_vars:
          LOG_LEVEL: "DEBUG"
        cpu_share: 1.0
        mem_share: "1024 MB"
      requirements:
        - host:
            node: Nodecellar_2_Runtime
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: tosca.relationships.HostedOn
        - mongo_db:
            node: Mongo_2
            capability: alien.capabilities.endpoint.docker.Mongo
            relationship: tosca.relationships.ConnectsTo
      capabilities:
        nodecellar_app:
          properties:
            docker_bridge_port_mapping: 0
            port: 4000
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1

    ContainerDeploymentUnit_Mongo:
      type: org.alien4cloud.extended.container.types.kubernetes.Deployment # Match node with a concrete type
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
      properties:
        apiVersion: apps/v1beta1
        kind: Deployment
        metadata:
          name: ContainerDeploymentUnit_Mongo
        spec:
          replicas: 1
          labels:
            anti_affinity_label: ContainerDeploymentUnit_Mongo
          template:
            spec:
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - key: anti_affinity_label
                          operator: In
                          values:
                          - ContainerDeploymentUnit_Mongo_2
                      topologyKey: kubernetes.io/hostname

    Mongo_Service:
      type: org.alien4cloud.extended.container.kubernetes.Service # Match node with a concrete type
      requirements:
        - dependency:
            node: ContainerDeploymentUnit_Mongo
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
      properties:
        apiVersion: v1
        kind: Service
        metadata:
          name: Mongo_Service
        spec:
          ports:
            - name: Mongo_mongo_db
              port: 27017
          selector:
            app: ContainerDeploymentUnit_Mongo
          type: NodePort

    Mongo_Runtime:
      type: org.alien4cloud.extended.container.types.kubernetes.Container # Match node with a concrete type
      requirements:
        - host:
            node: ContainerDeploymentUnit_Mongo
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
      properties:
        container:
          name: Mongo
          image: mongo:latest
          resources:
            requests:
              memory: 512M
              cpu: 1.0
            limits:
              memory: 512M
              cpu: 1.0
          ports:
          - containerPort: { get_attribute: [SELF, docker_endpoint, port] }

    Mongo:
      type: alien.nodes.Application.Docker.Mongo
      properties:
        cpu_share: 1.0
        mem_share: "512 MB"
      capabilities:
        mongo_db:
          properties:
            docker_bridge_port_mapping: 0
            port: 27017
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
      requirements:
        - host:
            node: Mongo_Runtime
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: tosca.relationships.HostedOn

    ContainerDeploymentUnit_Mongo_2:
      type: org.alien4cloud.extended.container.types.kubernetes.Deployment # Match node with a concrete type
      capabilities:
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
      properties:
        apiVersion: apps/v1beta1
        kind: Deployment
        metadata:
          name: ContainerDeploymentUnit_Mongo_2
          labels:
            anti_affinity_label: ContainerDeploymentUnit_Mongo_2
        spec:
          replicas: 1
          template:
            spec:
              affinity:
                podAntiAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                        - key: anti_affinity_label
                          operator: In
                          values:
                          - ContainerDeploymentUnit_Mongo
                      topologyKey: kubernetes.io/hostname

    Mongo_2_Service:
      type: org.alien4cloud.extended.container.kubernetes.Service # Match node with a concrete type
      requirements:
        - dependency:
            node: ContainerDeploymentUnit_Mongo_2
            capability: tosca.capabilities.Node
            relationship: tosca.relationships.DependsOn
      properties:
        apiVersion: v1
        kind: Service
        metadata:
          name: Mongo_2_Service
        spec:
          ports:
            - name: Mongo_2_mongo_db
              port: 27017
          selector:
            app: ContainerDeploymentUnit_Mongo_2
          type: NodePort

    Mongo_2_Runtime:
      type: org.alien4cloud.extended.container.types.kubernetes.Container # Match node with a concrete type
      requirements:
        - host:
            node: ContainerDeploymentUnit_Mongo_2
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
      properties:
        container:
          name: Mongo_2
          image: mongo:latest
          resources:
            requests:
              memory: 512M
              cpu: 1.0
            limits:
              memory: 512M
              cpu: 1.0
          ports:
          - containerPort: 27017

    Mongo_2:
      type: alien.nodes.Application.Docker.Mongo
      properties:
        cpu_share: 1.0
        mem_share: "512 MB"
      capabilities:
        mongo_db:
          properties:
            docker_bridge_port_mapping: 0
            port: 27017
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
        scalable:
          properties:
            min_instances: 1
            max_instances: 1
            default_instances: 1
      requirements:
        - host:
            node: Mongo_2_Runtime
            capability: org.alien4cloud.extended.container.capabilities.ApplicationHost
            relationship: tosca.relationships.HostedOn

  policies:
    - mongo_anti_affinity:
        type: org.alien4cloud.extended.container.policy.kubernetes.AntiAffinityLabel
        description: The anti affinity policy between node 1 and 2
        targets: [ContainerDeploymentUnit_Mongo, ContainerDeploymentUnit_Mongo_2]
        properties:
          level: host
