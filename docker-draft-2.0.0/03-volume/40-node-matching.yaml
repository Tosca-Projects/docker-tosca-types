tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: docker-draft.03-volume
  template_version: 2.0.0-SNAPSHOT
  template_author: alien4cloud

description: >
  A nocellar and a mongo container inside a deployment unit also hosting a volume

imports:
  - docker-types:1.4.0-SNAPSHOT
  - tosca-normative-types:2.0.0-SNAPSHOT
  - docker-draft.sandbox.samples:2.0.0-SNAPSHOT

topology_template:

  description: >
    A nocellar and a mongo container inside a deployment unit also hosting a volume

  node_templates:

    DockerExtVolume:
      type: org.alien4cloud.extended.container.types.kubernetes.volume.HostPathVolumeSource
      properties:
        name: DockerExtVolume
        path: /mnt/host_volume_path
      requirements:
        - host:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
        - attachment:
            type_requirement: attachment
            node: Nodecellar
            capability: alien.capabilities.DockerVolumeAttachment
            relationship: alien.relationships.MountDockerVolume
            properties:
              container_path: /tmp/var
        - attachment_mongo:
            type_requirement: attachment
            node: Mongo
            capability: alien.capabilities.DockerVolumeAttachment
            relationship: alien.relationships.MountDockerVolume
            properties:
              container_path: /tmp/var

    Nodecellar:
      type: org.alien4cloud.extended.container.kubernetes.abstract.Container
      requirements:
        # HOWTO: Should we change relationships ?
        - host:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
        - mongo_db:
            type_requirement: docker_endpoint
            node: Mongo_Service
            capability: tosca.capabilities.Endpoint
            relationship: tosca.relationships.ConnectsTo
      capabilities:
        # HOWTO: Should we change capabilities ?
        docker_endpoint: # replace nodecellar_app
          properties:
            port: 3000
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
      properties:
        container:
          name: Nodecellar
          env:
            # Merge env variables coming from properties and implementation interfaces
            LOG_LEVEL: "DEBUG"
            MONGO_HOST: { get_attribute: [TARGET, mongo_db, ip_address] }
            MONGO_PORT: { get_attribute: [TARGET, mongo_db, port] }
            NODECELLAR_PORT: 3000
          # HOWTO: handle repositories ?
          image: afraisse/nodecellar:exp
          resources:
            requests:
              memory: 1024M
              cpu: 1.0
            limits:
              memory: 1024M
              cpu: 1.0
          command: ["/bin/bash", "-c", "cd /nodecellar && nodejs server.js" ]
          ports:
          - containerPort: { get_attribute: [SELF, docker_endpoint, port] }

    Mongo:
      type: org.alien4cloud.extended.container.kubernetes.abstract.Container
      requirements:
        - host:
            node: ContainerDeploymentUnit
            capability: tosca.capabilities.Container.Docker
            relationship: tosca.relationships.HostedOn
      capabilities:
        docker_endpoint:
          properties:
            port: 27017
            protocol: tcp
            secure: false
            network_name: PRIVATE
            initiator: source
      properties:
        container:
          name: Mongo
          image: mongo:latest
          resources:
            requests:
              memory: 512M
              cpu: 1.0
            limits:
              memory: 512M
              cpu: 1.0
          ports:
          - containerPort: { get_attribute: [SELF, docker_endpoint, port] }

    ContainerDeploymentUnit:
      type: org.alien4cloud.extended.container.types.kubernetes.abstract.Deployment
      properties:
        apiVersion: apps/v1beta1
        kind: Deployment
        metadata:
          name: ContainerDeploymentUnit # Should generate a uniq name
        spec:
          replicas: 1 # HOWTO: only the default nb instances is used and set here ?

    Nodecellar_Service:
      type: org.alien4cloud.extended.container.kubernetes.abstract.Service
      requirements:
        dependency:
          node: ContainerDeploymentUnit
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
      properties:
        apiVersion: v1
        kind: Service
        metadata:
          name: Nodecellar_Service # Should generate a uniq name
        spec:
          ports:
            - name: Nodecellar_docker_endpoint
              port: { get_property: [Nodecellar, docker_endpoint, port] }
          selector:
            app: ContainerDeploymentUnit # podname
          type: NodePort

    Mongo_Service:
      type: org.alien4cloud.extended.container.kubernetes.abstract.Service
      requirements:
        dependency:
          node: ContainerDeploymentUnit
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
      properties:
        apiVersion: v1
        kind: Service
        metadata:
          name: Mongo_Service # Should generate a uniq name
        spec:
          ports:
            - name: Mongo_docker_endpoint
              port: { get_property: [Mongo, docker_endpoint, port] }
          selector:
            app: ContainerDeploymentUnit # podname
          type: NodePort